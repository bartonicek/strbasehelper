add(10)
c("x", "y", "z")
bbb <- c(1, 2, 3)
names(bbb) <- c("x", "y", "z")
names(bbb) <- c("x", NA, "z")
bbb
names(bbb) <- c("x", NULL, "z")
bbb
Curry <- function(fun) {
function(...) {
args <- list(...)
names(args) <- names(formals(fun))
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add(10)
add(10)(20)
add(10, 20)
Curry <- function(fun) {
function(...) {
args <- list(...)
names(args) <- names(formals(fun))[1:length(args)]
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add(10)
add(10)(20)
add(10)(20)()
add(10)(20)
Curry <- function(fun) {
function(...) {
args <- list(...)
nams <- names(formals(fun))[!sapply(formals(fun), is.symbol)]
print(nams)
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add(10)(20)
add()
Curry <- function(fun) {
function(...) {
args <- list(...)
nams <- names(formals(fun))[sapply(formals(fun), is.symbol)]
print(nams)
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add()
function(...) {
args <- list(...)
missing_arg_names <- names(formals(fun))[sapply(formals(fun), is.symbol)]
names(args) <- missing_arg_names[1:length(args)]
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
Curry <- function(fun) {
function(...) {
args <- list(...)
missing_arg_names <- names(formals(fun))[sapply(formals(fun), is.symbol)]
names(args) <- missing_arg_names[1:length(args)]
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add()
function(...) {
args <- list(...)
if (length(args) == 0) return(Curry(fun))
missing_arg_names <- names(formals(fun))[sapply(formals(fun), is.symbol)]
names(args) <- missing_arg_names[1:length(args)]
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
Curry <- function(fun) {
function(...) {
args <- list(...)
if (length(args) == 0) return(Curry(fun))
missing_arg_names <- names(formals(fun))[sapply(formals(fun), is.symbol)]
names(args) <- missing_arg_names[1:length(args)]
formals(fun) <- modifyList(formals(fun), args)
if (!any(sapply(formals(fun), is.symbol))) {
return(fun())
}
Curry(fun)
}
}
add <- Curry(function(x, y) (x + y))
add()
add(x = 1, y = 2)
add(1, 2)
add(1)(2)
add(1)(10)
sapply(1:10, add(1))
sapply(1:10, add(20))
prepend <- Curry(function(x, y) paste0(y, x))
sapply(letters, prepend("!"))
add <- Curry(function(x, y) (x + y))
append <- Curry(function(x, y) paste0(y, x))
sapply(letters, prepend("!"))
add <- Curry(function(x, y) (x + y))
prepend_append <- Curry(function(x, y, z) paste0(z, y, x))
sapply(letters, prepend("Hello ", "!"))
sapply(letters, prepend("Hello ")("!"))
prepend_append("x", "z", "y")
prepend_append("x", "y", "z")
sapply(letters, prepend_append("Hello", "bye"))
sapply(letters, prepend_append("Hello ", ", bye"))
add <- Curry(function(x, y) (x + y))
prepend_append <- Curry(function(x, y, z) paste0(y, z, x))
sapply(1:10, add(20))
sapply(letters, prepend_append("Hello ", ", bye"))
add <- Curry(function(x, y) (x + y))
prepend_append <- Curry(function(x, y, z) paste0(x, z, y))
sapply(1:10, add(20))
sapply(letters, prepend_append("Hello ", ", bye"))
usethis::use_r("utility_functions")
library(strbasehelper)
profile_data_long
profmanager1 <- ProfileManager$new(profile_data_long)
profmanager1$fetch_strbase_tables()
profmanager1$tables
profmanager1$tables[[1]]
profmanager1$tables[[1]][[2]]
profmanager1$tables[[2]][[2]]
profmanager1$tables[[3]][[2]]
profmanager1 <- ProfileManager$new(profile_data_long, "Cofiler")
profmanager1$fetch_strbase_tables()
profmanager1$tables[[3]][[2]]
profmanager1$tables
profmanager1$multiplex
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
devtools::install(
)
library(strbasehelper)
library(strbasehelper)
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
r()
.rs.restartR()
library(strbasehelper)
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 3)
.rs.restartR()
profmanager1$tables
devtools::install()
devtools::install(
)
library(strbasehelper)
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 3)
profmanager1$tables
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 3)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
profmanager1$unique_loci
x <- profmanager1$unique_loci
x[1]
profmanager1$tables[[1]]
t1s <- profmanager1$tables[[1]]
t1s[[2]]
tab2 <- t1s[[2]]
set <- tab2[grep(self$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set <- tab2[grep(profmanager1$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*$")
set_pattern
tab3 <- t1s[[2]]
names(tab3)
x
names(tab3)
names(tab2)
tab3 <- t1s[[3]]
names(tab3)
col_names <- names(tab3)
bp_col <- grep(set_pattern, col_names)
bp_col
tab3[bp_col]
col_names <- names(tab3)
ref_col <- grep("^Ref.$", col_names)
rep_str_col <- grep("^Repeat.+Structure", col_names)
bp_col <- grep(set_pattern, col_names)
variant_rows <- grepl("variant", tab3[, ref_col, drop = TRUE])
empty_rep_rows <- tab3[, rep_str_col] == ""
bp_tab <- tab3[!variant_rows & !empty_rep_rows, c(1, bp_col)]
names(bp_tab) <- c("allele", "base_pairs")
bp_tab$locus <- loci[i]
bp_tab$locus <- x[1]
bp_tab$allele <- as.numeric(gsub("^(\\d{2}\\.?\\d?).*[[:blank:]].*$", "\\1", bp_tab$allele))
bp_tab$base_pairs <- as.numeric(gsub(" bp$", "", bp_tab$base_pairs))
bp_tab <- na.omit(bp_tab)
bp_tab <- bp_tab[!duplicated(bp_tab), ]
locus_bp_tab <- rbind(locus_bp_tab, bp_tab)
bp_tab
t1s <- profmanager1$tables[[2]]
tab2 <- t1s[[2]]
tab3 <- t1s[[3]]
set <- tab2[grep(profmanager1$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*$")
col_names <- names(tab3)
ref_col <- grep("^Ref.$", col_names)
rep_str_col <- grep("^Repeat.+Structure", col_names)
bp_col <- grep(set_pattern, col_names)
variant_rows <- grepl("variant", tab3[, ref_col, drop = TRUE])
empty_rep_rows <- tab3[, rep_str_col] == ""
bp_tab <- tab3[!variant_rows & !empty_rep_rows, c(1, bp_col)]
names(bp_tab) <- c("allele", "base_pairs")
bp_tab$locus <- x[1]
names(bp_tab) <- c("allele", "base_pairs")
bp_tab
t1s <- profmanager1$tables[[2]]
tab2 <- t1s[[2]]
tab3 <- t1s[[3]]
set <- tab2[grep(profmanager1$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*$")
col_names <- names(tab3)
ref_col <- grep("^Ref.$", col_names)
rep_str_col <- grep("^Repeat.+Structure", col_names)
bp_col <- grep(set_pattern, col_names)
variant_rows <- grepl("variant", tab3[, ref_col, drop = TRUE])
empty_rep_rows <- tab3[, rep_str_col] == ""
bp_tab <- tab3[!variant_rows & !empty_rep_rows, c(1, bp_col)]
bp_tab
x[2]
set_number
set
set <- tab2[grep(profmanager1$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
x[2]
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables(n = 2)
profmanager1$extract_basepairs()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "COfiler")
profmanager1$fetch_strbase_tables()
x <- profmanager1$unique_loci
profmanager1$extract_basepairs()
profmanager1 <- ProfileManager$new(profile_data_long, "Profiler Plus")
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables()
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
rlang::last_error()
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables(n = 3)
profmanager1$extract_basepairs()
profmanager1$fetch_strbase_tables(n = 1)
profmanager1$extract_basepairs()
t1s <- profmanager1$tables[[1]]
t1s <- profmanager1$tables[[1]]
tab2 <- t1s[[2]]
tab3 <- t1s[[3]]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
set
set <- tab2[grep(self$multiplex, tab2[, 3, drop = TRUE]), 1, drop = TRUE]
t1s <- profmanager1$tables[[1]]
tab2 <- t1s[[2]]
tab3 <- t1s[[3]]
set <- tab2[grep("Identifiler", tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*$")
col_names <- names(tab3)
ref_col <- grep("^Ref.$", col_names)
rep_str_col <- grep("^Repeat.+Structure", col_names)
bp_col <- grep(set_pattern, col_names)
set_pattern
col_names
set_pattern
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*\\*?$")
bp_col <- grep(set_pattern, col_names)
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables(n = 1)
profmanager1$extract_basepairs()
profmanager1$extract_basepairs()
profmanager1$profile_data
profmanager1$extract_basepairs()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables(n = 1)
profmanager1$profile_data
profmanager1$extract_basepairs()
profmanager1$profile_data
profmanager1$profile_plot()
profmanager1$profile_data
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
profmanager1$profile_plot()
profmanager1 <- ProfileManager$new(profile_data_long)
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
profmanager1$profile_plot()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
profmanager1$profile_plot()
profmanager1$profile_data
View(profmanager1$profile_data)
install.packages("ggrepel")
devtools::load_all()
profmanager1 <- ProfileManager$new(profile_data_long, "Identifiler")
profmanager1$fetch_strbase_tables()
profmanager1$extract_basepairs()
profmanager1$profile_plot()
2 ^ 2 ^ 2 ^ 1/2 ^ 1/2
2 ^ 2 ^ ^ 1/2 ^ 1/2
2 ^ 2 ^ 1/2 ^ 1/2
2 ^ 2 ^ 1/2 ^ 1/2 ^ 0
2 ^ 2 ^ 1/2 ^ 1/2 ^ 0
2 ^ 2 ^ 1/2 ^ 1/2
((2 ^ 2) ^ 1/2) ^ 1/2
(((2 ^ 2) ^ 1/2) ^ 1/2) ^ 1
(((2 ^ 2) ^ 1/2) ^ 1/2) ^ (-1)
(((2 ^ 2) ^ 1/2) ^ 1/2) ^ (-2)
10 ^ (-2)
(10 ^ (-2)) ^ (-2)
(10 ^ (-2)) ^ (-1/2)
# Create data
set.seed(112)
data <- matrix(sample(1:30,15) , nrow=3)
colnames(data) <- c("A","B","C","D","E")
rownames(data) <- c("var1","var2","var3")
# Get the stacked barplot
barplot(data,
col=colors()[c(23,89,12)] ,
border="white",
space=0.04,
font.axis=2,
xlab="group")
data
# Get the stacked barplot
barplot(data,
border="white",
space=0.04,
font.axis=2,
xlab="group")
# Get the stacked barplot
barplot(data)
data
# Create data
set.seed(112)
data <- matrix(sample(1:30,15) , nrow=3)
colnames(data) <- c("A","B","C","D","E")
# Get the stacked barplot
barplot(data)
data2 <- matrix(c(
1.1,
1.2,
1.3
), ncol = 1)
# Get the stacked barplot
barplot(data)
# Get the stacked barplot
barplot(data2)
data2 <- matrix(c(
1.1,
1.2,
1.3), ncol = 1)
barplot(data2)
data2
cumprod(data2)
data3 <- matrix(cumprod(data2), ncol = 1)
barplot(data3)
cumprod(data2)
difF(cumprod(data2))
diff(cumprod(data2))
c(1.1, diff(cumprod(data2)))
data3 <- matrix(c(1.1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1.1,
1.5,
2), ncol = 1)
data3 <- matrix(c(1.1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
1.5,
2), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
1.5,
1.75), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
cumsum(data2)
cumprod(data2)
cumsum(cumprod(data2))
cumprod(data2)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
data2 <- matrix(c(
1,
2,
3), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
2,
2), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
2,
0.5), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
2,
1.2), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
data2 <- matrix(c(
1,
1.5,
1.2,
2), ncol = 1)
data3 <- matrix(c(1, diff(cumprod(data2))), ncol = 1)
barplot(data3)
cumprod(data2)
x <- c(1, 1.2, 1.5, 1.1)
cumprod(x)
plot(1:4, cumprod(x))
plot(1:4, cumprod(x), type = "l")
sqrt(100)
sqrt(200)
seq(0, 200, by = 14)
x <- seq(0, 200, by = 14)
length(x)
n <- 100
x <- seq(0, n, by = sqrt(n))
length(x)
n <- 1000
x <- seq(0, n, by = sqrt(n))
length(x)
n <- 10000
x <- seq(0, n, by = sqrt(n))
length(x)
n <- 10
x <- seq(0, n, by = sqrt(n))
length(x)
n <- 10
x <- seq(0, n, by = floor(sqrt(n)))
length(x)
x <- seq(0, n, by = floor(log(n)))
length(x)
floor(log(n))
n <- 100
x <- seq(0, n, by = floor(log(n)))
length(x)
n <- 1000
x <- seq(0, n, by = floor(log(n)))
length(x)
