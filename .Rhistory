library(devtools)
use_github()
use_r("ProfileManager")
profile_data <- as.data.frame(readxl::read_excel("Profiles.xlsx"))
names(profile_data) <- tolower(names(profile_data))
rownames(profile_data) <- profile_data$locus
counts_list <- apply(profile_data[, -c(1, 6)], 1, table)
loci <- profile_data$locus
profile_data_long <- profile_data |>
tidyr::pivot_longer(a1:b2, values_to = "allele") |>
dplyr::select(-name) |>
dplyr::group_by(locus, colour) |>
dplyr::count(allele) |>
dplyr::ungroup()
profile_data_long
devtools::load_all()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$get_strbase_tables()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$get_strbase_tables()
profileManager$fetch_strbase_tables()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables()
#' An R6 class that handles fetching STRBase tables and linking it with profile data
#'
#'
ProfileManager <- R6::R6Class("ProfileManager", list(
#' @field multiplex The multiplex to be used
multiplex = NULL,
#' @field profile_data Profile data, stored as a long dataframe (locus, colour, allele, count)
profile_data = NULL,
#' @field unique_loci Vector of unique loci present in the data
unique_loci = NULL,
#' @field invalid_loci Vector of loci to skip during fetching and data cleaning
invalid_loci = c("AMEL"),
#' @field tables A list of all STRBase tables, one element per each unique (valid) locus
tables = list(),
#' @description
#' Create a new ProfileManager object
#' @param profile_data Profile data, in a long format
#' @param multiplex The multiplex to be used for linking
initialize = function(profile_data, multiplex = "Powerplex 16") {
cols <- c("allele", "colour", "locus", "n")
stopifnot(all.equal(sort(names(profile_data)), cols))
self$multiplex <- multiplex
self$profile_data <- profile_data
self$unique_loci <- unique(profile_data$locus)
},
fetch_strbase_tables = function() {
loci <- self$unique_loci
for (i in seq_along(loci)) {
if (loci[i] %in% self$invalid_loci) next
cat("Fetching ", sprintf('%-12s', paste0(loci[i], "...")),
'[', i, '/', length(loci), ']', '\n', sep = "")
url <- paste0("https://strbase.nist.gov/str_",
loci[i], ".htm")
self$tables[[loci[i]]] <- rvest::read_html(url) |>
rvest::html_table(fill = TRUE, header = TRUE)
# set_row <- grep("PowerPlex 16", tables[[2]]$`PCR Primer Sequences`)
# set <- tables[[2]][set_row, "Reported Primers", drop = TRUE]
# if (!(set %in% names(tables[[3]]))) {
#   cat("Multiplex")
# }
# cols <- c(names(tables[[3]])[1], set, 'Ref.')
# print(tables[[3]][, cols])
}
}
# print = function() {
#   cat('# of unique loci:', length(self$unique_loci), '\n')
#   cat('Unique loci:', self$unique_loci, '\n')
# }
))
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables()
profileManager$tables
profileManager$tables[[1]]
document()
?profileManager
?ProfileManager
document()
document()
?ProfileManager
document()
?ProfileManager
?ProfileManager
document()
?ProfileManager
profileManager$tables
profileManager$tables[[1]]
profileManager$tables[[1]][[2]]
bb <- profileManager$tables[[1]][[2]]
grep("PowerPlex 16", bb[, 3])
grep("PowerPlex 16", bb[, 3, drop = TRUE])
bb[grep("PowerPlex 16", bb[, 3, drop = TRUE]), ]
bb[grep("PowerPlex 16", bb[, 3, drop = TRUE]), 1]
bb[grep("PowerPlex 16", bb[, 3, drop = TRUE]), 1, drop = TRUE]
tab2 <- profileManager$tables[[1]][[2]]
tab2[grep("PowerPlex 16", tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set <- tab2[grep("PowerPlex 16", tab2[, 3, drop = TRUE]), 1, drop = TRUE]
gsub('* \\d$', '', set)
gsub('*+ \\d$', '', set)
gsub('* \\d$', '', set)
gsub('* \\1$', '', set)
gsub('^Set [1-9]$', '\\1', set)
sub('^Set [1-9]$', '\\1', set)
sub('^Set ([1-9])$', '\\1', set)
set_number <- asn.numeric(sub('^Set ([1-9])$', '\\1', set))
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
tab3 <- profileManager$tables[[1]][[3]]
tab3
names(tab3)
set_pattern <- paste0('^Set ', set_number, '$')
set_pattern
grep(set_pattern, names(tab3))
bp_col_num <- grep(set_pattern, names(tab3))
bp_col_num
set_pattern <- paste0('^Set [0-9,]', set_number, '[,0-9]$')
bp_col_num <- grep(set_pattern, names(tab3))
bp_col_num
set_pattern <- paste0('^Set *[0-9,]', set_number, '[,0-9]$')
set
bp_col_num <- grep(set_pattern, names(tab3))
bp_col_num
set_pattern <- paste0("^Set [0-9,]*", set)number, "[,0-9]*$")
set_pattern <- paste0("^Set [0-9,]*", set_number, "[,0-9]*$")
set_pattern
bp_col_num <- grep(set_pattern, names(tab3))
bp_col_num <- grep(set_pattern, names(tab3))
tab3
tab3[, bp_col_num]
tab3[, c(1, bp_col_num)]
tab3[, c(1, bp_col_num, ncol(tab3))]
is.null(NULL)
list()
length(list())
devtools::load_all()
#' Profile Manager
#' @description
#' An R6 class that handles fetching STRBase tables and linking it with profile data
#'
#'
ProfileManager <- R6::R6Class("ProfileManager", list(
#' @field multiplex The multiplex to be used
multiplex = NULL,
#' @field profile_data Profile data, stored as a long dataframe (locus, colour, allele, count)
profile_data = NULL,
#' @field unique_loci Vector of unique loci present in the data
unique_loci = NULL,
#' @field invalid_loci Vector of loci to skip during fetching and data cleaning
invalid_loci = c("AMEL"),
#' @field tables A list of all STRBase tables, one element per each unique (valid) locus
tables = list(),
#' @description
#' Create a new ProfileManager object
#' @param profile_data Profile data, in a long format
#' @param multiplex The multiplex to be used for linking
initialize = function(profile_data, multiplex = "Powerplex 16") {
cols <- c("allele", "colour", "locus", "n")
stopifnot(all.equal(sort(names(profile_data)), cols))
self$multiplex <- multiplex
self$profile_data <- profile_data
self$unique_loci <- unique(profile_data$locus)
},
#' @description
#' Retrives multiple sets of tables with information about gene loci from STRBase
#' (one for each unique gene locus in the data)
fetch_strbase_tables = function() {
loci <- self$unique_loci
for (i in seq_along(loci)) {
if (loci[i] %in% self$invalid_loci) next
# Print progress
cat("Fetching ", sprintf('%-12s', paste0(loci[i], "...")),
'[', i, '/', length(loci), ']', '\n', sep = "")
url <- paste0("https://strbase.nist.gov/str_",
loci[i], ".htm")
self$tables[[loci[i]]] <- rvest::read_html(url) |>
rvest::html_table(fill = TRUE, header = TRUE)
}
extract_basepairs = function() {
if (length(self$tables) == 0) {
stop("Please fetch tables from STRBase first using $fetch_strbase_tables() method")
}
loci <- self$unique_loci
for (i in seq_along(loci)) {
if (loci[i] %in% self$invalid_loci) next
tab2 <- self$tables[[loci[i]]][[2]]
tab3 <- self$tables[[loci[i]]][[3]]
set <- tab2[grep("PowerPlex 16", tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
print(set)
print(set_number)
}
}
}
# print = function() {
#   cat('# of unique loci:', length(self$unique_loci), '\n')
#   cat('Unique loci:', self$unique_loci, '\n')
# }
))
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables()
profileManager$extract_
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
#' Profile Manager
#' @description
#' An R6 class that handles fetching STRBase tables and linking it with profile data
#'
#'
ProfileManager <- R6::R6Class("ProfileManager", list(
#' @field multiplex The multiplex to be used
multiplex = NULL,
#' @field profile_data Profile data, stored as a long dataframe (locus, colour, allele, count)
profile_data = NULL,
#' @field unique_loci Vector of unique loci present in the data
unique_loci = NULL,
#' @field invalid_loci Vector of loci to skip during fetching and data cleaning
invalid_loci = c("AMEL"),
#' @field tables A list of all STRBase tables, one element per each unique (valid) locus
tables = list(),
#' @description
#' Create a new ProfileManager object
#' @param profile_data Profile data, in a long format
#' @param multiplex The multiplex to be used for linking
initialize = function(profile_data, multiplex = "Powerplex 16") {
cols <- c("allele", "colour", "locus", "n")
stopifnot(all.equal(sort(names(profile_data)), cols))
self$multiplex <- multiplex
self$profile_data <- profile_data
self$unique_loci <- unique(profile_data$locus)
},
#' @description
#' Retrives multiple sets of tables with information about gene loci from STRBase
#' (one for each unique gene locus in the data)
fetch_strbase_tables = function() {
loci <- self$unique_loci
for (i in seq_along(loci)) {
if (loci[i] %in% self$invalid_loci) next
# Print progress
cat("Fetching ", sprintf('%-12s', paste0(loci[i], "...")),
'[', i, '/', length(loci), ']', '\n', sep = "")
url <- paste0("https://strbase.nist.gov/str_",
loci[i], ".htm")
self$tables[[loci[i]]] <- rvest::read_html(url) |>
rvest::html_table(fill = TRUE, header = TRUE)
}
extract_basepairs = function() {
if (length(self$tables) == 0) {
stop("Please fetch tables from STRBase first using $fetch_strbase_tables() method")
}
loci <- self$unique_loci
for (i in seq_along(loci)) {
if (loci[i] %in% self$invalid_loci) next
tab2 <- self$tables[[loci[i]]][[2]]
tab3 <- self$tables[[loci[i]]][[3]]
set <- tab2[grep("PowerPlex 16", tab2[, 3, drop = TRUE]), 1, drop = TRUE]
set_number <- as.numeric(sub('^Set ([1-9])$', '\\1', set))
print(set)
print(set_number)
}
}
}
# print = function() {
#   cat('# of unique loci:', length(self$unique_loci), '\n')
#   cat('Unique loci:', self$unique_loci, '\n')
# }
))
devtools::load_all()
devtools::load_all()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables()
devtools::load_all()
profileManager$extract
profileManager$extract_basepairs()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables()
profileManager <- ProfileManager$new(profile_data_long)
if (NULL) print("aaa")
if (is.null(NULL)) print("aaa")
devtools::load_all()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$unique_loci
profileManager$fetch_strbase_tables(FGA)
profileManager$fetch_strbase_tables(c("FGA"))
profileManager$fetch_strbase_tables(loci = c("FGA"))
profileManager$fetch_strbase_tables()
devtools::load_all()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables(c("FGA"))
profileManager$fetch_strbase_tables(c("FGA"))
devtools::load_all()
devtools::document()
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables(c("FGA"))
profileManager$extract_basepairs()
?ProfileManager
devtools::install()
library(strbasehelper)
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables(c("FGA"))
profileManager$fetch_strbase_tables("hell")
library(strbasehelper)
devtools::load_all()
profileManager <- ProfileManager$new(profile_data_long)
profileManager$fetch_strbase_tables(c("FGA"))
